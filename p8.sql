-- PROGRAM 8
/**
*  adds a new transaction. Each time the program is executed, it takes a vendor
*  number, an account number, and an amount from the user. The program first checks the
*  validity of the vendor number and account number. The transaction number is generated by
*  the program. The date of the transaction should be the date on which the program is executed
*  and assigned by the computer automatically. The program stores the new transaction into the
*  transaction table, it then updates the balances of the related customer and vendor with the
*  amount of the new transaction. It then displays the new transaction, and the updated customer
*  and vendor records.
*
*/

create or replace function p8(vendor_num text, account_num text, trans_amount NUMERIC(10,2)) returns void as $$
    declare
        trans_num text;
        trans_date DATE := (SELECT CURRENT_DATE);
        id int := 1;
        is_valid boolean := 1;
        t_record text;
        v_record text;
        c_record text;
    begin
        -- Check validity of the vendor and account numbers
        if not exists(SELECT Vno FROM v WHERE Vno=vendor_num) then
            raise exception 'Nonexistent vendor number: %', vendor_num using hint = 'Please enter a valid vendor number';
            is_valid := 0;
        end if;
        if not exists(SELECT Account FROM c WHERE Account=account_num) then
            raise exception 'Nonexistent customer (account) number: %', account_num using hint = 'Please enter a valid customer (account) number';
            is_valid := 0;
        end if;

        -- Both vendor and account numbers are valid
        if is_valid then
            -- Print program headings
            raise notice 'ADDING NEW TRANSACTION, SHOWING UPDATED CUSTOMER AND VENDOR RECORDS:';
            raise notice '-------------------------------------------------------------------------------------------------------------';

            -- determines the primary key based on the current contents of the table - the transaction number
            loop
                if not exists(SELECT Tno FROM t WHERE Tno=('T' || id)) then
                    -- set the transaction number if it's available (not already in use)
                    trans_num := 'T' || id;
                    exit; -- break loop
                else -- increment to the next transaction number
                    id := id + 1;
                end if;
            end loop;

            -- Stores new transaction and updates customer and vendor balances
            INSERT INTO t VALUES (trans_num, vendor_num, account_num, trans_date, trans_amount);
            UPDATE v SET Vbalance=Vbalance+trans_amount WHERE Vno=vendor_num;
            UPDATE c SET Cbalance=Cbalance+trans_amount WHERE Account=account_num;
            -- Displays updated data after transaction
            SELECT format('TRANSACTION:  %-5s | %-5s | %-5s | %-10s | %-12s ', t.Tno, t.Vno, t.Account, t.T_date, t.Amount) INTO t_record
                FROM t WHERE Tno=trans_num;
            SELECT format('-- VENDOR:    %-5s | %s | %s | %s ', v.Vno, v.Vname, v.City, v.Vbalance) INTO v_record
                FROM v WHERE Vno=vendor_num;
            SELECT format('-- CUSTOMER:  %-5s | %s | %s | %s | %s ', c.Account, c.Cname, c.Province, c.Cbalance, c.Crlimit) INTO c_record
                FROM c WHERE Account=account_num;
            raise notice '%', t_record;
            raise notice '%', v_record;
            raise notice '%', c_record;
        end if;
    end;
$$ language plpgsql;